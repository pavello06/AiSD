Program Lab1_4;

Uses
  System.SysUtils;

Type
    TNumberString = String[7];
    BiPt = ^BiElem;
    BiElem = Record
        Data: TNumberString;
        Next: BiPt;
        Prev: BiPt;
    End;
    UniPt = ^UniElem;
    UniElem = Record
        Data: TNumberString;
        Next: UniPt;
    End;    

Function IsValidNumber(Number: TNumberString) : Boolean;
Var
    IsValid: Boolean;
Begin
    IsValid := True;
    Try
        StrToInt(String(Number));
    Except
        IsValid := False;
    End;
    If IsValid And (Length(Number) <> 3) And (Length(Number) <> 7) Then
        IsValid := False;
    IsValidNumber := IsValid;
End;

Procedure ReadNumber(Var BiListNumbers: BiPt; IsFirst: Boolean; MessageText: String);
Var
    Number: BiPt;
    IsValid: Boolean;
Begin
    Repeat
        IsValid := True;
        Number := BiListNumbers;
        ReadLn(Number^.Data);
        If IsFirst Or Not IsFirst And (Number^.Data <> '\0') Then
        Begin
            If IsValidNumber(Number^.Data) Then
            Begin
                New(BiListNumbers);
                Number^.Next := BiListNumbers;
                BiListNumbers^.Prev := Number;
            End
            Else
            Begin
                IsValid := False;
                WriteLn(MessageText);
            End;
        End;
    Until IsValid;
End;

Procedure MakeBiListOfNumbers(Var BiListNumbers, BiFirst: BiPt);
Begin
    WriteLn('Введите 3-х или 7-ми значные номера(для выхода введите ''\0''):');
    New(BiListNumbers);
    BiFirst := BiListNumbers;
    BiListNumbers^.Prev := Nil;
    ReadNumber(BiListNumbers, True, 'Вы должны ввести хотя бы один верный номер!');
    Repeat
        ReadNumber(BiListNumbers, False, 'Неверный номер!');
    Until BiListNumbers^.Data = '\0';
    BiListNumbers := BiListNumbers^.Prev;
    BiListNumbers^.Next := Nil;
End;



Procedure MakeUniListOfServiceNumbers(Var UniListOfServiceNumbers, UniFirst: UniPt; BiListOfNumbers: BiPt);
Const
    LEN_SUB_NUMBER = 7;
Begin
    New(UniListOfServiceNumbers);
    UniFirst := UniListOfServiceNumbers;
    While BiListOfNumbers <> Nil Do
    Begin
        If Length(BiListOfNumbers^.Data) = LEN_SUB_NUMBER Then
        Begin
            New(UniListOfServiceNumbers^.Next);
            UniListOfServiceNumbers := UniListOfServiceNumbers^.Next;
            UniListOfServiceNumbers^.Data := BiListOfNumbers^.Data;
        End;
        BiListOfNumbers := BiListOfNumbers^.Prev;
    End;
    UniFirst := UniFirst^.Next;
    UniListOfServiceNumbers^.Next := Nil;
End;

Procedure SortUniListOfServiceNumbers(Var UniListOfServiceNumbers: UniPt; UniFirst: UniPt);
Var
    CountOfServiceNumbers: Integer;
    I, J: Integer;
    TempNember: TNumberString;
Begin
    UniListOfServiceNumbers := UniFirst;
    CountOfServiceNumbers := 0;
    While UniListOfServiceNumbers <> Nil Do
    Begin
        Inc(CountOfServiceNumbers);
        UniListOfServiceNumbers := UniListOfServiceNumbers^.Next;
    End;
    UniListOfServiceNumbers := UniFirst;
    For I := 1 To CountOfServiceNumbers - 1 Do
        For J := 1 To CountOfServiceNumbers - I Do
        Begin  
            If StrToInt(String(UniListOfServiceNumbers^.Data)) > StrToInt(String(UniListOfServiceNumbers^.Next^.Data)) Then
            Begin
                TempNember := UniListOfServiceNumbers^.Data;
                UniListOfServiceNumbers^.Data := UniListOfServiceNumbers^.Next^.Data;
                UniListOfServiceNumbers^.Next^.Data := TempNember;
            End;
        End;
End;



Procedure WriteUniListOfServiceNumbers(UniListOfServiceNumbers, UniFirst: UniPt);
Begin
    WriteLn('Список номеров абонентов: ');
    UniListOfServiceNumbers := UniFirst;
    While UniListOfServiceNumbers <> Nil Do
    Begin
        WriteLn(UniListOfServiceNumbers^.Data);
        UniListOfServiceNumbers := UniListOfServiceNumbers^.Next;
    End;
End;



Var
    BiFirst, BiListOfNumbers: BiPt;
    UniFirst, UniListOfServiceNumbers: UniPt;
Begin
    MakeBiListOfNumbers(BiListOfNumbers, BiFirst);
    
    MakeUniListOfServiceNumbers(UniListOfServiceNumbers, UniFirst, BiListOfNumbers);
    SortUniListOfServiceNumbers(UniListOfServiceNumbers, UniFirst);
    
    WriteUniListOfServiceNumbers(UniListOfServiceNumbers, UniFirst);
    
    ReadLn;
End.
